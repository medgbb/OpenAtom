module gStatePlane
{
    extern module pcMessages;

	//message RSFFTMsg     { complex data[]; };
	//message GSIFFTMsg    { complex data[]; };
	//message GSRedPsiMsg  { complex data[]; };
	//message GStateOutMsg 
	//{
	//	complex data[];
	//	complex vdata[];
	//	int k_x[];
	//	int k_y[];
	//	int k_z[];
	//};

    //include "paircalc/pcInstanceIDs.h";
    class pcSetupMsg;

	//class UberCollection;
    //include "paircalc/pcFwdDeclarations.h";
    //include "load_balance/PeList.h";

	array [2D]  CP_State_GSpacePlane 
	{
		entry CP_State_GSpacePlane();
		//entry CP_State_GSpacePlane(Config config_in, int cp_min_opt_in);
        entry void acceptPairCalcAIDs(pcSetupMsg *msg);
		//entry void initGSpace(int m, complex pts[m], int mv, complex vpts[mv], int nx,int ny,int nz,int ngridaNL,int ngridbNL,int ngridcNL, int istart_cp);
		//entry void acceptIFFT(GSIFFTMsg *);
		//entry [local] void doIFFT();
		//entry void doFFT();
		//entry void completeRDMAhandshake(RDMASetupConfirmationMsg<RDMApair_GSP_PC> *msg);
		//entry void collectFileOutput(GStateOutMsg *msg);
		entry void acceptNewPsi(CkReductionMsg *msg);	
		entry void acceptNewPsi(partialResultMsg *msg);	
		//entry void acceptRedPsi(GSRedPsiMsg *msg);	
		entry [local] void doNewPsi();
		//entry [local] void doNewPsiV();
		entry [local] void doLambda();
		entry void acceptLambda(CkReductionMsg *msg);
		entry void acceptLambda(partialResultMsg *msg);

		entry void acceptNewPsiV(CkReductionMsg *msg);
		entry void acceptNewPsiV(partialResultMsg *msg);
		//entry void acceptRedPsiV(GSRedPsiMsg *msg);
		
		entry void sendPsi();
		entry void sendPsiV();
		entry void sendLambda();

		entry void makePCproxies();
		//entry void startNewIter ();

		//entry void computeEnergies(int p, double d);
		//entry void psiCgOvlap(CkReductionMsg *);
		//entry void readFile();
	};
};