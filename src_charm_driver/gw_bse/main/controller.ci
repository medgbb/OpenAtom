
module controller {
  include "matrix.h";
  extern module psi_cache;
  extern module eps_matrix;
  extern module matrix;
  extern module pmatrix;
  extern module mat_mul;
  extern module main;
  readonly CProxy_Controller controller_proxy;

#define percent 25
#define MAX_ITERATIONS 100

#define STEP_START(x)\
  timers.x = CmiWallTimer();

#define STEP_END(x,s)\
  double step_now = CmiWallTimer();\
  timers.x = step_now - timers.x;\
  CkPrintf("[CONTROLLER] %-40s @%.2fs (%.2fs elapsed)\n", s, step_now, timers.x);

#define STEP_BOUNDARY(x,y,s)\
  double step_now = CmiWallTimer();\
  timers.x = step_now - timers.x;\
  timers.y = step_now;\
  CkPrintf("[CONTROLLER] %-40s @%.2fs (%.2fs elapsed)\n", s, step_now, timers.x);

#define PHASE_BOUNDARY(x,y,s)\
  double phase_now = CmiWallTimer();\
  timers.x = phase_now - timers.x;\
  timers.y = phase_now;\
  CkPrintf("[CONTROLLER] ====================================================================\n");\
  CkPrintf("[CONTROLLER] ==== %-35s @%.2fs (%.2fs elapsed)\n", s, phase_now, timers.x);\
  CkPrintf("[CONTROLLER] ====================================================================\n");

  // Describes and controls the main control flow of the entire computation, by
  // by coordinating communication between all other chares in the system.
  chare Controller {
    entry Controller();

    // reductions used for control flow
    entry void matrixReady();
    entry void prep();
    entry void calc_Geps();
    entry [reductiontarget] void created1d_complete();
    entry void done_geps(int epsilon_size_in);
    entry void got_geps(std::vector<int> accept, int epsilon_size);
    entry void got_vcoulb(std::vector<double> vcoulb);
    entry [reductiontarget] void fftControllerReady();
    entry [reductiontarget] void psiCacheReady();
    entry [reductiontarget] void fCacheReady();
    entry [reductiontarget] void cachesFilled();
    entry [reductiontarget] void psiComplete();
    entry [reductiontarget] void fftComplete();
    entry [reductiontarget] void transposeComplete();
    entry [reductiontarget] void copyComplete();
    entry [reductiontarget] void transpose_complete();
    entry [reductiontarget] void set_size();
    entry [reductiontarget] void m_multiplied();
    entry [reductiontarget] void complement_multiplied();
    entry [reductiontarget] void found_alpha(double alpha);
    entry [reductiontarget] void scalar_multiplied();
    entry [reductiontarget] void converge_results(double max);
    entry [reductiontarget] void prepare_epsilon();
    entry [reductiontarget] void epsilon_created();
    entry [reductiontarget] void bareExchangeComplete(complex x);
    entry [reductiontarget] void finished_copy();

    entry void reportFTime(CkReductionMsg*);
    entry void reportPTime(CkReductionMsg*);

    entry [reductiontarget] void iterationComplete(){
      serial{
        pmatrix1D_proxy.start_iteration();
      }
    }
    // Main control flow
    entry void run() {
      when fftControllerReady() serial {
        states_proxy.fftGtoR();
      }
      when fftComplete(), psiCacheReady() serial {
        for (next_K = 0; next_K < K; next_K++) {
          for (next_state = 0; next_state < L; next_state++) {
            states_proxy(0, next_K, next_state).sendToCache();
          }
        }
      }
      when fCacheReady(), cachesFilled() serial {
        PHASE_BOUNDARY(total_setup, total_phase1, "SETUP COMPLETE");
      }

      // Send a message to each unoccupied state, telling them to broadcast to
      // all PsiCaches. When a PsiCache receives an unoccupied state, it
      // uses its local copies of the occupied states to compute all the f
      // vectors for the unoccupied state it just received, which will then be
      // used to update the P matrix by adding the outer-product of each f.
      for (next_K = 0; next_K < K && total_sent < max_sends; next_K++) {
        for (next_state = L; next_state < L + M && total_sent < max_sends; next_state++) {
          serial {
            states_proxy(0, next_K, next_state).sendToComputeF();
            total_sent++;
          }
          // This constrains us to only sending out 'pipeline_stages' number of
          // states at a time. As the PsiCaches complete work on the states, we
          // can send more.
          if (total_sent >= pipeline_stages) {
            when psiComplete() serial {
              if (++total_complete >= next_report_threshold) {
                CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                    total_complete*100 / max_sends, CmiWallTimer());
                next_report_threshold = total_complete + max_sends/10;
              }
            }
          }
        }
      }
      // Wait for the PsiCaches to finish up with the remaining unoccupied
      // states.
      while (total_complete < max_sends) {
        when psiComplete() serial {
          if (++total_complete >= next_report_threshold) {
            CkPrintf("[CONTROLLER] P formation %3i%% complete @%.2f\n",
                total_complete*100 / max_sends, CmiWallTimer());
            next_report_threshold = total_complete + max_sends/10;
          }
        }
      }

      // Phase 1 is complete, so get more detailed timing info from the P Matrix
      // chares and the PsiCache chares.
      serial {
        STEP_BOUNDARY(form_p, get_times, "P formed in R Space");
        pmatrix2D_proxy.reportPTime();
        psi_cache_proxy.reportFTime();
      }

      overlap {
        when reportPTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          timers.total_pcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          timers.pcomp_count = stats_result.count;
          timers.avg_pcomp = stats_result.mean;
          delete msg;
        }
        when reportFTime(CkReductionMsg* msg) serial {
          CkReduction::tupleElement* results = NULL;
          int num_reductions = 0;
          msg->toTuple(&results, &num_reductions);

          timers.max_fcomp = *(double*)results[0].data;
          CkReduction::statisticsElement& stats_result = *(CkReduction::statisticsElement*)results[1].data;
          timers.fcomp_count = stats_result.count;
          timers.avg_fcomp = stats_result.mean;
          delete msg;
        }
      }

      // At this point, all unoccupied states have been sent and processed, so
      // P is completely formed in R space. Now we can FFT it to G space. First
      // we switch from a 2D decomposition to a 1D decomposition, so that FFT
      // calls can be done with fftw calls.
      serial {
        STEP_BOUNDARY(get_times, to1D, "Detailed times received");

        CkPrintf("[CONTROLLER] Compute fs (max across %i nodes):                     \t%.2fs\n",
            timers.fcomp_count, timers.max_fcomp);
        CkPrintf("[CONTROLLER] Compute fs (avg across %i nodes):                     \t%.2fs\n",
            timers.fcomp_count, timers.avg_fcomp);

        CkPrintf("[CONTROLLER] Aggregate P (total across %i chares):                 \t%.2fs\n",
            timers.pcomp_count, timers.total_pcomp);
        CkPrintf("[CONTROLLER] Aggregate P (avg across %i chares):                   \t%.2fs\n",
            timers.pcomp_count, timers.avg_pcomp);
        CkPrintf("[CONTROLLER] Aggregate P (avg per PE assuming %0.2f chares per PE):\t%.2fs\n",
            ((double)timers.pcomp_count/CkNumPes()),
            timers.avg_pcomp * ((double)timers.pcomp_count/CkNumPes()));

        PHASE_BOUNDARY(total_phase1, total_phase2, "PHASE 1 (P in R Space) COMPLETE");
        CkCallback cb(CkReductionTarget(Controller, copyComplete), thisProxy);
        matrixCopy(pmatrix2D_proxy, pmatrix1D_proxy, cb);
      }

      // When we receive this message, we know that P has switched to a 1D
      // decomposition, so tell it to FFT all of it's rows.
      when copyComplete() serial{
        STEP_BOUNDARY(to1D, fft1, "Matrix decomposition changed to 1D");
        pmatrix1D_proxy.fftRows(1);
      }

      // The FFT of the rows is complete, so now transpose the matrix.
      when fftComplete() serial{
        STEP_BOUNDARY(fft1, trans1, "First FFT complete");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // Transpose is complete, so FFT the rows again in the opposite direction.
      when transposeComplete() serial{
        STEP_BOUNDARY(trans1, fft2, "First transpose complete");
        pmatrix1D_proxy.fftRows(-1);
      }

      // The second FFT is complete, so transpose back.
      when fftComplete() serial{
        STEP_BOUNDARY(fft2, trans2, "Second fft complete");
        pmatrix1D_proxy.start_iteration();
        pmatrix1D_proxy.doTranspose();
      }

      // The final transpose is complete so now switch back to the 2D decomp.
      when transposeComplete() serial{
        STEP_BOUNDARY(trans2, to2D, "Second transpose complete");
        PHASE_BOUNDARY(total_phase2, total_phase3, "PHASE 2 (FFT P) COMPLETE");
        prep();
      }

      when done_geps(int epsilon_size_in) serial{
        int pad = 10 - (epsilon_size_in%10);
        padded_epsilon_size = epsilon_size_in+pad;
        controller_proxy.calc_Geps();
      }
      when prepare_epsilon() serial {
        mat_mul_proxy.setup(matA, matB, matC, eps_matrix2D_proxy, eps_matrix2D_bproxy, eps_matrix2D_cproxy, padded_epsilon_size, eps_rows, true, true, true);
      }
      when matrixReady() serial {
        eps_matrix2D_proxy.setSize(padded_epsilon_size);
      }
      when set_size() serial {
        eps_matrix2D_cproxy.setSize(padded_epsilon_size);
      }
      when set_size() serial {
        eps_matrix2D_bproxy.setSize(padded_epsilon_size);
      }
      when set_size() serial {
        CkPrintf("\n[CONTROLLER] Preprocessing before Epsilon matrix");
        pmatrix1D_proxy.generateEpsilon(accept_result);
      }
      when epsilon_created() serial {
        CkPrintf("\n[CONTROLLER] Created Epsilon Matrix");
        eps_matrix2D_proxy.createTranspose(false);
      }
      when transpose_complete() serial {
        CkPrintf("\n[CONTROLLER] Created Transpose");
        for(index=0;index<padded_epsilon_size/eps_rows;index++)
          eps_proxy1D(index).insert();
        eps_proxy1D.doneInserting();
        eps_proxy1D.setSize(padded_epsilon_size);
         //X = m*m^T
        mat_mul_proxy.do_multiply(eps_matrix2D_proxy, eps_matrix2D_bproxy, eps_matrix2D_cproxy);
      }

      when m_multiplied() serial{
        eps_matrix2D_cproxy.sendTo1D();
      }
      when created1d_complete() serial{
        //find alpha
        CkPrintf("\n[CONTROLLER] Multiplied Matrices X = m*m^T\n");
        eps_proxy1D.findAlpha();
      }
      when found_alpha(double alpha) serial{
        CkPrintf("\n[CONTROLLER] Computed alpha\n");
        eps_matrix2D_proxy.scalar_multiply(1/alpha);
      }

      // X = eps_matrix2D_proxy
      // assign A = eps->m (warning!! A is column major)
      when scalar_multiplied() serial{
        resultInsert = true;
        eps_matrix2D_bproxy.createTranspose(true);//Dummy call
        //Result A - eps_matrix2D_bproxy
      }

      for(iteration=0; iteration<MAX_ITERATIONS; iteration++) {
        // Step 1: M1 = 2I - A * X

        when transpose_complete() serial {
          //if(iteration%percent==0)
          //CkPrintf("\n[CONTROLLER] Scalar multiplied - M1 = -A * X [%d percent complete]\n",100*iteration/MAX_ITERATIONS);
          // Step 1-(a) : M1 = -A * X
          eps_matrix2D_cproxy.setSize(padded_epsilon_size);
          eps_matrix2D_bproxy.setSize(padded_epsilon_size);
          eps_matrix2D_ccproxy.setSize(padded_epsilon_size);
          mat_mul_proxy.setup(matA2, matB2, matC2, eps_matrix2D_proxy, eps_matrix2D_bproxy, eps_matrix2D_ccproxy, padded_epsilon_size, eps_rows, false, false, resultInsert);
          //some more transpose needs to be done before calling the iterative matrix multiplication
        }
        when matrixReady() serial {
          if(iteration%percent==0)
          CkPrintf("\n[CONTROLLER] Matrix Setup done");
          mat_mul_proxy.do_multiply(eps_matrix2D_proxy, eps_matrix2D_bproxy, eps_matrix2D_ccproxy);
        }
        when m_multiplied() serial {
          // Step 1-(b) : M1 = 2I-M1
		      if(iteration%percent==0)
			      CkPrintf("\n[CONTROLLER] Multiplied Matrices - Step 1-(a) : M1 = -A * X\n");
          eps_matrix2D_ccproxy.add_compl_two();
        }

        // Step 2: X1 = X * M1
        // X = eps_matrix2D_proxy
        // M1 - pmatrix2D_ccproxy
        when complement_multiplied() serial {
          if (iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Step 1-(b) : M1 = 2I-M1");
          // Result X1 - eps_matrix2D_bbproxy
          eps_matrix2D_cproxy.setSize(padded_epsilon_size); // This can cause a hang
          eps_matrix2D_ccproxy.setSize(padded_epsilon_size);
          eps_matrix2D_bbproxy.setSize(padded_epsilon_size);
          mat_mul_proxy.setup(matA3, matB3, matC3, eps_matrix2D_ccproxy, eps_matrix2D_proxy, eps_matrix2D_bbproxy, padded_epsilon_size, eps_rows, false, false, resultInsert);
        }

        when matrixReady() serial {
          if (iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Matrix Setup done");
          mat_mul_proxy.do_multiply(
              eps_matrix2D_ccproxy,
              eps_matrix2D_proxy,
              eps_matrix2D_bbproxy);
        }

        // X = X1
        when m_multiplied() serial {
          if(iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Multiplied Matrices - Step 2: X1 = X * M1");
          if(iteration%percent==0)
            CkPrintf("\n[CONTROLLER] Calling convergence\n");
          eps_matrix2D_bbproxy.convergence_check(eps_matrix2D_proxy);
        }

        when converge_results(double max) serial {
          double diff = (prev_max-max > 0) ? prev_max-max : (prev_max-max)*-1;
          if (diff < 0.00001) {
            // int(prev_max*100000) == (int)(max*100000))
            CkPrintf("\nConverged at iteration %d\n", iteration);
            iteration = MAX_ITERATIONS;
          }
          prev_max = max;
          eps_matrix2D_bbproxy.sendTo(eps_matrix2D_proxy);
        }
        when finished_copy() serial {
          resultInsert = false;
          thisProxy.transpose_complete();
        }
      } //end of for loop

      serial {
	      PHASE_BOUNDARY(total_phase3, total_phase4, "PHASE 3 (Epsilon Matrix Inversion) COMPLETE");
        //Bare exchange
        //TODO:compute Fs that for n's that are occ
        //fvector_cache_proxy.computeFTilde();
      //}

      //when fftComplete() serial {
        eps_matrix2D_proxy.bareExchange();
        //eps_matrix2D_proxy.screenedExchange();
      }
      overlap {
        when bareExchangeComplete(complex x) serial {
          CkPrintf("Bare Exchange complete: %f + %fi\n", x.re, x.im);
        }

        /*when screenedExchangeComplete(complex x) serial {
          CkPrintf("Screened Exchange complete: %f + %fi\n", x.re, x.im);
        }*/
      }
      serial { CkExit(); }
    }
  };
};
