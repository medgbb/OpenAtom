mainmodule gw_bse {

  mainchare GWBSEDriver {
    entry GWBSEDriver(CkArgMsg* msg);
  };

  // Each KPsi computes and stores a Psi for a single k and l
  array [2D] KPsi {
    entry KPsi(); // Constructor computes psi
    entry void fcalcDone();
    entry void sendPsi() {
      // Send out the initial Psis to the fcalc
      for (l = 0; l < pipeline_stages; l++) serial {
        int k = thisIndex.x;
        if (l == thisIndex.y) {
          fcalc(k, *, l, *).receivePsi(l, psi);
        }
      }
      // Send out the rest of the Psis as we receive done messages
      while (l < L) {
        when fcalcDone() serial {
          if (l == thisIndex.y) {
            fcalc(k, *, l, *).receivePsi(psi);
          }
          l++;
        }
      }
      // After all Psis have been sent out, wait for the rest of the dones
      for (l = 0; l < pipeline_stages; l++) {
        when fcalcDone() {}
      }
    };
  };

  // Each QPsi computes and stores a Psi for a single k+q and m
  array [2D] QPsi {
    entry QPsi(); // Constructor computes psi
    entry void fcalcDone();
    entry void sendPsi() {
      // Send out the initial Psis to the fcalc
      for (l = 0; l < pipeline_stages; l++) serial {
        int q = thisIndex.x;
        int m = thisIndex.y;
        fcalc(*, q, l, m).receivePsi(psi);
      }
      // Send out the rest of the Psis as we receive done messages
      while (l < L) {
        when fcalcDone() serial {
          fcalc(*, k + q, l, m).receivePsi(psi);
          l++;
        }
      }
      // After all Psis have been sent out, wait for the rest of the dones
      for (l = 0; l < pipeline_stages; l++) {
        when fcalcDone() {}
      }
    };
  };

  // 4D array for computing f for a particular k q l m
  array [4D] FCalculator {
    entry FCalculator();
    entry void run() {
      when receivePsi(psi1), receivePsi(psi2) serial {
        computeF(psi1, psi2);
        // TODO: Figure out exactly how we are going to compute P from f
        // TODO: These need to be section reductions over L planes
        contribute(CkCallback(CkReductionTarget(KPsi, fcalcDone), kpsi));
        contribute(CkCallback(CkReductionTarget(QPsi, fcalcDone), qpsi));
      }
    };
  };

  array [1D] PMatrix {
    entry PMatrix();
    entry void receiveContribution(row_of_p);
  };
};
