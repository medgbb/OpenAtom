mainmodule gw_bse {

  readonly int K;
  readonly int Q;
  readonly int L;
  readonly int M;

  readonly int psi_size;
  readonly int pipeline_stages;

  readonly CProxy_Psi kpsi;
  readonly CProxy_Psi qpsi;
  readonly CProxy_FCalculator fcalc;

  mainchare GWBSEDriver {
    entry GWBSEDriver(CkArgMsg* msg);
  };

  array [2D] Psi {
    entry Psi(bool occupied); // Constructor computes psi
    entry void fcalcDone();
    entry void sendPsi() {
      serial { CkPrintf("[%d,%d]: Got message\n", thisIndex.x, thisIndex.y); }
      serial { createSections(); }
      // Send out the initial Psis to the fcalc
      for (l = 0; l < pipeline_stages; l++) serial {
        if (sections[section_index].first == l) {
          sections[section_index++].second.receivePsi(psi_size, psi);
        }
      }
      // Send out the rest of the Psis as we receive done messages
      while (l < L) {
        when fcalcDone() serial {
          if (sections[section_index].first == l) {
            sections[section_index++].second.receivePsi(psi_size, psi);
          }
          l++;
        }
      }
      // After all Psis have been sent out, wait for the rest of the dones
      for (l = 0; l < pipeline_stages; l++) {
        when fcalcDone() {}
      }
    };
  };

  // 4D array for computing f for a particular k q l m
  array [4D] FCalculator {
    entry FCalculator();
    entry void receivePsi(int length, double psi[length]);
    entry void run() {
      when  receivePsi(int l1, double psi1[l1]),
            receivePsi(int l2, double psi2[l2]) serial {
        CkPrintf("[%d,%d,%d,%d]: Received both Psis\n", thisIndex.w, thisIndex.x, thisIndex.y, thisIndex.z);
        computeF(psi1, psi2);
        // TODO: Figure out exactly how we are going to compute P from f
        // TODO: These need to be section reductions over L planes
        //contribute(CkCallback(CkReductionTarget(KPsi, fcalcDone), kpsi));
        //contribute(CkCallback(CkReductionTarget(QPsi, fcalcDone), qpsi));
      }
    };
  };

  array [1D] PMatrix {
    entry PMatrix();
  };
};
