module eps_matrix {
  include "ckcomplex.h";
  include "CLA_Matrix.h";
  
  extern module messages;
  readonly CProxy_EpsMatrix2D eps_matrix2D_proxy;
  readonly CProxy_EpsMatrix2D pmatrix2D_bproxy;
  readonly CProxy_EpsMatrix2D pmatrix2D_cproxy;

  readonly CProxy_EpsMatrix2D pmatrix2D_aaproxy;
  readonly CProxy_EpsMatrix2D pmatrix2D_bbproxy;
  readonly CProxy_EpsMatrix2D pmatrix2D_ccproxy;  


#define IDXBIG(r,c) ((r)*local_mtx_size_1d_x + (c))
#define IDX(r,c) ((r)*num_cols + (c))

  array [2D] EpsMatrix2D {
    entry EpsMatrix2D();
    entry void EpsMatrix2D(CLA_Matrix_interface mat);
    entry [reductiontarget] void applyFs();
    entry void setSize(int size);
    entry void checkReady();
    entry void receiveChunk(Phase2Message*);
    entry void createTranspose();
    entry void receiveTranspose(std::vector<complex> incoming);
    entry void sendTo(CProxy_EpsMatrix2D receiver_proxy);
    entry void receiveData(std::vector<complex> incoming);
    entry void reportPTime();
    entry void multiply(double alpha, double beta);
    entry void round_done(void);
    entry void findAlpha(void);
    entry void scalar_multiply(double alpha);
    entry void add_compl_two();
    entry void convergence_check(CProxy_EpsMatrix2D cmp_proxy);
    entry void receiveConvCheck(std::vector<complex> incoming);
    entry void setI(CLA_Matrix_interface mat, bool clean);
    entry void receiveFs(complex eps_data[140*140]);
//    entry void startMigration(void);
  };
};
