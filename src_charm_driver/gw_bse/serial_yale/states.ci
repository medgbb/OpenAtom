// A module defining the various messages that are shared between modules
module messages {
  // A message used to package and send around psi arrays
  message PsiMessage {
    complex psi[];
  };
};

module controller {
  extern module messages;
  readonly CProxy_Controller controller_proxy;
  readonly CProxy_PsiCache psi_cache_proxy;

  // Controls the coordination between the states, pmatrix, and cache based on
  // the configuration of pipeline depth, number of stages, etc.
  chare Controller {
    entry Controller();
    entry [reductiontarget] void cachesFilled();
    entry [reductiontarget] void psiComplete();

    entry void run() {
      serial { fillCaches(); }

      when cachesFilled() serial { sendInitialPsis(); }

      while (next_state < L + M) {
        when psiComplete() serial {
          states_proxy(0,0,next_state++).sendToP();
        }
      }

      when psiComplete() serial { CkExit(); }
    }
  };

  // Caches psis locally on each node so they can be reused when forming P
  nodegroup PsiCache {
    entry PsiCache();
    entry void receivePsi(PsiMessage*);
  };
};

module states {
readonly CProxy_States states_proxy;

  // An array containing all of the states in the system. After reading in the
  // states and performing an initial FFT it waits for the controller to tell it
  // where and when to send its data.
  array [3D] States {
    entry States();
    entry [reductiontarget] void sendToCache();
    entry [reductiontarget] void sendToP();
  };  
};

module pmatrix {
  extern module messages;
  readonly CProxy_PMatrix pmatrix_proxy;

  // An array containing a distributed representation of P. Each time it
  // receives a psi, it multiplies that psi against cached psis to incrementally
  // compute its values.
  array [1D] PMatrix {
    entry PMatrix();
    entry [nokeep] void receivePsi(PsiMessage*);
  };
};
